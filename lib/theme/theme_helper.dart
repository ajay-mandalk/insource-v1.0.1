import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray900,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray100.withOpacity(0.39),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w300,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray500,
          fontSize: 14.fSize,
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.greenA70001,
          fontSize: 12.fSize,
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: colorScheme.secondaryContainer,
          fontSize: 64.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        displayMedium: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 40.fSize,
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: appTheme.gray200,
          fontSize: 32.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 24.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray500,
          fontSize: 11.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.gray500,
          fontSize: 9.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 20.fSize,
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFF9C809),
    primaryContainer: Color(0XFFE6007A),
    secondaryContainer: Color(0XFFF9C80A),

    // Error colors
    errorContainer: Color(0XFFEBC500),

    // On colors(text colors)
    onPrimary: Color(0X26FF0000),
    onPrimaryContainer: Color(0XA2FFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber400 => Color(0XFFFFBF1D);
  Color get amber500 => Color(0XFFFFC107);
  Color get amberA100 => Color(0XFFFFEB85);
  Color get amberA10001 => Color(0XFFFFEC86);

  // Blackf
  Color get black9007f => Color(0X7F000000);

  // Blue
  Color get blue800 => Color(0XFF0A66C2);

  // BlueGray
  Color get blueGray100 => Color(0XFFD7D7D7);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray10002 => Color(0XFFD1D1D1);

  // BlueGrayb
  Color get blueGray4009b => Color(0X9B8D8D8D);

  // Cyan
  Color get cyan600 => Color(0XFF02A6C2);

  // Gray
  Color get gray100 => Color(0XFFF7F7F7);
  Color get gray10001 => Color(0XFFF5F5F5);
  Color get gray200 => Color(0XFFEFEFEF);
  Color get gray300 => Color(0XFFE2E3E9);
  Color get gray30001 => Color(0XFFE5E5EA);
  Color get gray400 => Color(0XFFB5B5B5);
  Color get gray500 => Color(0XFFA3A3A3);
  Color get gray50001 => Color(0XFF99989B);
  Color get gray50002 => Color(0XFF979797);
  Color get gray50003 => Color(0XFF919191);
  Color get gray800 => Color(0XFF444342);
  Color get gray80000 => Color(0X00413E3E);
  Color get gray900 => Color(0XFF151413);
  Color get gray90001 => Color(0XFF161414);

  // Green
  Color get green600 => Color(0XFF4DA637);
  Color get greenA400 => Color(0XFF00E290);
  Color get greenA700 => Color(0XFF25D366);
  Color get greenA70001 => Color(0XFF03C173);
  Color get greenA70002 => Color(0XFF02C173);

  // Indigo
  Color get indigo50 => Color(0XFFEBEFF7);
  Color get indigo600 => Color(0XFF375CA6);

  // LightBlue
  Color get lightBlue800 => Color(0XFF006FB3);

  // Lime
  Color get lime700 => Color(0XFFC3A634);
  Color get lime900 => Color(0XFF755B00);

  // Orange
  Color get orange500 => Color(0XFFEB9B00);
  Color get orange600 => Color(0XFFDE9200);

  // Red
  Color get redA200 => Color(0XFFFB4D4C);
  Color get redA400 => Color(0XFFFF1D1D);
  Color get redA700 => Color(0XFFFF0101);
  Color get redA70075 => Color(0X75FF0202);

  // Teal
  Color get teal400 => Color(0XFF26A17B);
  Color get teal900 => Color(0XFF044853);

  // White
  Color get whiteA700 => Color(0XFFFEFEFE);

  // Yellow
  Color get yellow600 => Color(0XFFFFCF31);
  Color get yellow700 => Color(0XFFFABE2C);
  Color get yellow900 => Color(0XFFF7931A);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
